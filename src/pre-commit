#!/bin/bash

# install ESlint
npm install
echo "********************************************"

# install requirements
REQUIRED_COMPOSER_LIBRARIES=( "overtrue/phplint" "wp-coding-standards/wpcs" "dealerdirect/phpcodesniffer-composer-installer" "composer-plugin-api" )
for library in "${REQUIRED_COMPOSER_LIBRARIES[@]}"
    composer require ${library} -v
fi;

PROJECT=`php -r "echo dirname(dirname(dirname(realpath('$0'))));"`
STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php`

# ESlint test (Javascript)
ESLINT="node_modules/.bin/eslint"
pwd

if [[ ! -x "$ESLINT" ]]; then
  printf "\t\033[41mPlease install ESlint\033[0m (npm install eslint)\n"
  exit 1
fi


# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
    oIFS=$IFS
    IFS='
    '
    SFILES="$1"
    IFS=$oIFS
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}

echo "Checking PHP Lint..."
for FILE in $SFILES
do
    php -l -d display_errors=0 "$PROJECT/$FILE"
    if [ $? != 0 ]
    then
        echo "Fix the error before commit."
        #exit 1
    fi
    FILES="$FILES \"$PROJECT/$FILE\""
done

if [ -f "$PROJECT/phpcs.ruleset.xml" ]
then
    RULESET="$PROJECT/phpcs.ruleset.xml"
elif [ -f "$PROJECT/phpcs.xml.dist" ]
then
    RULESET="$PROJECT/phpcs.xml.dist"
else
    RULESET="WordPress"
fi

echo "Checking Code Standard Compliance, using $RULESET as ruleset standard..."
for FILE in $SFILES
do
    ./vendor/bin/phpcs --standard="$RULESET" --colors --encoding=utf-8 -n -p "$PROJECT/$FILE"
    if [ $? != 0 ]
    then
        echo "Fix the error before commit."
        echo "Run"
        echo "  ./vendor/bin/phpcbf --standard=\"$RULESET\" $FILES"
        echo "for automatic fix or fix it manually."
        #exit 1
    fi
done

# JavaScript (React) testing.
echo "ESlint JS Tests"

#STAGED_FILES_CMD=($(git diff --cached --name-only --diff-filter=ACM | grep ".jsx\{0,1\}$"))
STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.js`

echo "ESLint'ing ${#STAGED_FILES_CMD[@]} files"

if [[ "$STAGED_FILES" = "" ]]; then
  exit 0
fi

$ESLINT "${STAGED_FILES[@]}" --fix

ESLINT_EXIT="$?"

# Re-add files since they may have been fixed
git add "${STAGED_FILES[@]}"

if [[ "${ESLINT_EXIT}" == 0 ]]; then
  printf "\n\033[42mCOMMIT SUCCEEDED\033[0m\n"
else
  printf "\n\033[41mCOMMIT FAILED:\033[0m Fix eslint errors and try again\n"
  exit 1
fi

exit $?
